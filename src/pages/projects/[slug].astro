---
import { getCollection, type CollectionEntry } from 'astro:content';
import Base from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

type Props = { project: CollectionEntry<'projects'> };

const { project } = Astro.props;
const { Content } = await project.render();
const displayDate = project.data.date
  ? project.data.date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      timeZone: 'UTC',
    })
  : null;
---

<Base title={`${project.data.title}`}>
  <article class="project-page">
    <header class="project-header">
      <div class="title-group">
        <h1>{project.data.title}</h1>
        {
          project.data.github && (
            <a
              href={project.data.github}
              target="_blank"
              rel="noopener noreferrer"
              class="github-link"
              aria-label="GitHub Repository"
            >
              <svg
                width="32"
                height="32"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <use href="/icons/github.svg#github" />
              </svg>
            </a>
          )
        }
      </div>
      <p class="project-description">{project.data.description}</p>
      {
        displayDate && (
          <p class="project-date">
            <time datetime={project.data.date.toISOString()}>
              {displayDate}
            </time>
          </p>
        )
      }
    </header>

    {
      project.data.image && (
        <div class="project-image">
          <img
            src={project.data.image}
            alt={project.data.image_alt || project.data.title}
            width="800"
            height="450"
          />
        </div>
      )
    }

    <div class="project-content">
      <Content />
    </div>
  </article>
</Base>

<style>
  .project-page {
    max-width: 800px;
  }

  .project-header {
    margin-bottom: 2rem;
  }

  .title-group {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.5rem;
  }

  .title-group h1 {
    margin: 0;
  }

  .github-link {
    color: var(--muted);
    transition: color 0.2s ease;
  }

  .github-link:hover {
    color: var(--accent);
  }

  .github-link svg {
    display: block;
  }

  .project-description {
    font-size: 1.2rem;
    color: var(--muted);
    margin: 1rem 0;
  }

  .project-date {
    font-size: 0.9rem;
    color: var(--muted);
    margin-top: 1rem;
  }

  .project-image {
    margin-bottom: 2rem;
  }

  .project-image img {
    width: 100%;
    height: auto;
    border-radius: 8px;
    border: 1px solid #1e232b;
  }

  .project-content {
    line-height: 1.7;
  }

  .project-content h2 {
    margin: 2rem 0 1rem 0;
    color: var(--text);
  }

  .project-content h3 {
    margin: 1.5rem 0 0.5rem 0;
    color: var(--text);
  }

  .project-content p {
    margin: 1rem 0;
  }

  .project-content ul,
  .project-content ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .project-content li {
    margin: 0.5rem 0;
  }

  .project-content a {
    color: var(--accent);
    text-decoration: none;
  }

  .project-content a:hover {
    text-decoration: underline;
  }
</style>
